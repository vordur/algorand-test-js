import { useCallback, useContext, useEffect, useState } from "react";
import { GetStaticProps } from "next";
import Head from "next/head";
import nookies from "nookies";

import {
  algodClientDev,
  createApp,
  createTestAcc,
  readTeal,
} from "../../algorand";
import styles from "../styles/Home.module.css";
import Context from "../context/Context";
import { ActionType } from "../context/reducer";

export const getStaticProps: GetStaticProps = async () => {
  const approval = await readTeal(
    algodClientDev,
    "../../../public/approval.teal"
  );

  const clear_state = await readTeal(
    algodClientDev,
    "../../../public/clear_state.teal"
  );

  const approval_arr = Array.from(approval);
  const clear_state_arr = Array.from(clear_state);

  return {
    props: { approval_arr, clear_state_arr },
  };
};

export default function Home() {
  const context = useContext(Context);
  const [addressSender, setAddressSender] = useState("");
  const [addressReceiver, setAddressReceiver] = useState("");
  const [status, setStatus] = useState("");
  const [claim, setClaim] = useState("");
  const [accInfo, setAccInfo] = useState<Record<string, any>>();

  const getAccInfo = async (address: string) => {
    console.count("here");
    try {
      const accountInfo = await algodClientDev.accountInformation(address).do();

      accInfo &&
        context.dispatch?.({
          type: ActionType.SET_INSURERACC,
          payload: {
            ...context.state,
            creatorInfo: accountInfo,
          },
        });

      setAccInfo(accountInfo);
      console.log(accountInfo);
    } catch (e) {
      console.error(e);
    }
  };

  const onGetCreatorWallet = useCallback(() => {
    if (window) {
      let address;
      const data = localStorage.getItem("insurer-wallet");
      if (!data) {
        console.log("IN HERE");
        const user = createTestAcc();
        address = user!.acc.addr;
        const sk = Array.from(user!.acc.sk) as unknown as Uint8Array;
        context.dispatch?.({
          type: ActionType.SET_INSURERACC,
          payload: {
            ...context.state,
            insurerAcc: {
              acc: {
                ...user!.acc,
                sk,
              },
              mnemonic: user!.mnemonic,
            },
          },
        });
      } else {
        const key = JSON.parse(data);
        address = key.acc.addr;
      }
      setAddressSender(address);
      address && getAccInfo(address);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  useEffect(() => {
    onGetCreatorWallet();
  }, [onGetCreatorWallet]);

  const claiming = async () => {
    setStatus(`Claiming ${claim}...`);
    const client = createTestAcc();
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Basic demo</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h2> Hæ hæ , smá algorand demo</h2>
        <strong>
          <p className={styles.walletInfo}>
            Insurer wallet:{" "}
            <i
              onClick={() => {
                navigator.clipboard.writeText(addressSender);
              }}
            >
              {addressSender}
            </i>
          </p>
          <p className={styles.walletInfo}>
            Amount: <i>{accInfo?.amount} algo</i>
          </p>
        </strong>
        {accInfo?.amount === 0 && (
          <p>
            Þarf að fara{" "}
            <a href="https://dispenser.testnet.aws.algodev.network/">hér</a> til
            að setja inn í fund.
          </p>
        )}
        {/* <select
          className={styles.select}
          onChange={(e) => setClaim(e.target.value)}
        >
          <option value="health">Health</option>
          <option value="care">Care</option>
        </select>

        <button className={styles.button} onClick={claiming}>
          Claim
        </button> */}

        <p>{status}</p>
      </main>
    </div>
  );
}
